name: Standalone Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: standalone-tests-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERHUB_ORG: madgik
  DEV_TAG: dev

jobs:
  build-images:
    name: Build (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: MONETDB
            file: monetdb/Dockerfile
            image_basename: exareme2_db
            cache_scope: exareme2_db
          - name: RABBITMQ
            file: rabbitmq/Dockerfile
            image_basename: exareme2_rabbitmq
            cache_scope: exareme2_rabbitmq

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image name
        id: names
        run: |
          echo "IMAGE=${{ env.DOCKERHUB_ORG }}/${{ matrix.image_basename }}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.IMAGE }}
          tags: |
            # stable dev tag
            type=raw,value=${{ env.DEV_TAG }}
            # dev-<shortsha> for traceability
            type=sha,format=short,prefix=${{ env.DEV_TAG }}-
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}

      # Build once and export a docker-archive TAR for the test job
      - name: Build image (docker archive)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.file }}
          push: false
          outputs: type=docker,dest=/tmp/${{ matrix.image_basename }}.tar
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache_scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache_scope }}

      - name: Upload image tar
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.image_basename }}
          path: /tmp/${{ matrix.image_basename }}.tar
          retention-days: 5

  tests:
    name: Run standalone tests
    runs-on: ubuntu-latest
    needs: build-images

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        id: venv-cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Bring in built images and load them locally
      - name: Download images
        uses: actions/download-artifact@v4
        with:
          pattern: image-*
          path: /tmp/images
          merge-multiple: true

      - name: Load images into Docker
        shell: bash
        run: |
          for tar in /tmp/images/*.tar; do
            echo "Loading $tar..."
            docker load -i "$tar"
          done
          docker images | grep madgik || true

      # (Optional) free some disk if your tests are heavy
      - name: Free some disk space
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android || true
          df -h

      - name: Run all standalone tests except SMPC
        id: non_smpc_tests
        run: poetry run pytest -s -m "not smpc" --cov=exareme2 --cov-report=xml:non_smpc_cov.xml tests/standalone_tests --verbosity=4
        env:
          PYTHONPATH: ${{ github.workspace }}/exareme2:${{ github.workspace }}
          PULL_DOCKER_IMAGES: false

      - name: Upload coverage to Qlty
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: ./non_smpc_cov.xml
