name: Algorithm Validation Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: algovalidation-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERHUB_ORG: madgik

jobs:
  # Build the images once (parallel), export as tarballs for test jobs
  build-images:
    name: Build (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: MONETDB
            file: monetdb/Dockerfile
            image_basename: exareme2_db
            cache_scope: exareme2_db
            tag: testing
          - name: RABBITMQ
            file: rabbitmq/Dockerfile
            image_basename: exareme2_rabbitmq
            cache_scope: exareme2_rabbitmq
            tag: testing

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image name
        id: names
        run: echo "IMAGE=${{ env.DOCKERHUB_ORG }}/${{ matrix.image_basename }}" >> $GITHUB_OUTPUT

      - name: Metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.IMAGE }}
          tags: |
            type=raw,value=${{ matrix.tag }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}

      - name: Build image (docker archive)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.file }}
          push: false
          outputs: type=docker,dest=/tmp/${{ matrix.image_basename }}.tar
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache_scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache_scope }}

      - name: Upload image tar
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.image_basename }}
          path: /tmp/${{ matrix.image_basename }}.tar
          retention-days: 5

  # Matrix for the two topologies
  algo-tests:
    name: ${{ matrix.pretty }}
    runs-on: ubuntu-latest
    needs: build-images
    strategy:
      fail-fast: false
      matrix:
        include:
          - pretty: One-node validation
            deploy_template: tests/algorithm_validation_tests/one_node_deployment_template.toml
            flower_cmd: >-
              poetry run pytest tests/algorithm_validation_tests/flower/
              --verbosity=4 -n 2 --reruns 6 --reruns-delay 5
            exareme2_cmd: >-
              poetry run pytest tests/algorithm_validation_tests/exareme2
              --verbosity=4 -n 16 --reruns 3 --reruns-delay 5
          - pretty: Five-nodes validation
            deploy_template: tests/algorithm_validation_tests/five_node_deployment_template.toml
            flower_cmd: >-
              poetry run pytest tests/algorithm_validation_tests/flower
              -n 2 --verbosity=4 --reruns=6 --reruns-delay=5 -k 'not mnist'
            exareme2_cmd: >-
              poetry run pytest tests/algorithm_validation_tests/exareme2/
              --verbosity=4 -n 16 -k 'input1 and not input1-'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Python + Poetry (cached venv)
      - name: Setup Python
        id: py
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        id: venv-cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-py${{ steps.py.outputs.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install deps (poetry)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi --no-root

      # Bring in images built in the previous job and load them locally
      - name: Download images
        uses: actions/download-artifact@v4
        with:
          pattern: image-*
          path: /tmp/images
          merge-multiple: true

      - name: Load images into Docker
        shell: bash
        run: |
          for tar in /tmp/images/*.tar; do
            echo "Loading $tar..."
            docker load -i "$tar"
          done
          docker images | grep madgik || true

      # Deploy local stack via invoke tasks
      - name: Copy deployment template
        run: cp "${{ matrix.deploy_template }}" ./.deployment.toml

      - name: Create config files
        run: poetry run inv create-configs

      - name: Deploy all api (no install/start)
        run: poetry run inv deploy --no-install-dep --no-start-all

      - name: Load data into DBs
        run: poetry run inv load-data

      - name: Start api after data loading
        run: |
          poetry run inv start-worker --all
          poetry run inv start-controller --detached

            # Logs (pre)
      - name: Controller logs
        shell: bash
        run: cat /tmp/exareme2/controller.out || true
      - name: Globalworker logs
        shell: bash
        run: cat /tmp/exareme2/globalworker.out || true
      - name: Localworker logs
        shell: bash
        run: cat /tmp/exareme2/localworker1.out || true

      # Replace the 3 webiny post-run steps with one "always" step
      - name: Collect logs (always)
        if: always()
        shell: bash
        run: |
          echo "=== Dumping /tmp/exareme2/*.out (if present) ==="
          for f in /tmp/exareme2/*.out; do
            [[ -e "$f" ]] || continue
            echo "----- $f -----"
            cat "$f" || true
            echo
          done

      # Optional: also upload the logs as an artifact for easy download
      - name: Upload logs artifact (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: exareme2-logs-${{ matrix.pretty }}
          path: /tmp/exareme2/*.out
          if-no-files-found: ignore

      # Test runs (matrix-provided commands)
      - name: Run Flower algorithm validation tests
        run: ${{ matrix.flower_cmd }}

      - name: Run Exareme2 algorithm validation tests
        run: ${{ matrix.exareme2_cmd }}
